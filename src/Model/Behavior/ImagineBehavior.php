<?php
/**
 * Copyright 2011-2015, Florian Krämer
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * Copyright 2011-2015, Florian Krämer
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */
namespace AdaptiveImages\Model\Behavior;

use Cake\ORM\Behavior;
use Cake\ORM\Table;
use AdaptiveImages\Lib\ImagineUtility;

/**
 * CakePHP Imagine Plugin
 */
class ImagineBehavior extends Behavior {

/**
 * Default settings array
 *
 * @var array
 */
	protected $_defaultConfig = [
		'engine' => 'Imagick'
	];

/**
 * Keeping a reference to the table in order to,
 * be able to retrieve associations and fetch records for counting.
 *
 * @var array
 */
	protected $_table;

/**
 * Constructor
 *
 * @param Table $table The table this behavior is attached to.
 * @param array $settings The settings for this behavior.
 */
	public function __construct(Table $table, array $settings = []) {
		parent::__construct($table, $settings);

		$class = '\Imagine\\' . $this->config('engine') . '\Imagine';
		$this->Imagine = new $class();
		$this->_table = $table;
	}

/**
 * Get the imagine object
 *
 * @return Imagine object
 */
	public function imagineObject() {
		return $this->Imagine;
	}

/**
 * Loads an image and applies operations on it
 *
 * Caching and taking care of the file storage is NOT the purpose of this method!
 *
 * @param $ImageObject
 * @param null $output
 * @param array $imagineOptions
 * @param array $operations
 * @throws \BadMethodCallException
 * @internal param string $image source image path
 * @internal param $mixed
 * @internal param \Imagine $array image objects save() 2nd parameter options
 * @return bool
 */
	public function processImage($ImageObject, $output = null, $imagineOptions = [], $operations = []) {
		if (is_string($ImageObject)) {
			$ImageObject = $this->Imagine->open($ImageObject);
		}

		foreach ($operations as $operation => $params) {
			if (method_exists($this->_table, $operation)) {
				$this->_table->{$operation}($ImageObject, $params);
			} elseif (method_exists($this, $operation)) {
				$this->{$operation}($ImageObject, $params);
			} else {
				throw new \BadMethodCallException(__d('imagine', 'Unsupported image operation {0}!', $operation));
			}
		}

		if ($output === null) {
			return $ImageObject;
		}

		return $ImageObject->save($output, $imagineOptions);
	}

/**
 * Turns the operations and their params into a string that can be used in a file name to cache an image.
 *
 * Suffix your image with the string generated by this method to be able to batch delete a file that has versions of it cached.
 * The intended usage of this is to store the files as my_horse.thumbnail+width-100-height+100.jpg for example.
 *
 * So after upload store your image meta data in a db, give the filename the id of the record and suffix it
 * with this string and store the string also in the db. In the views, if no further control over the image access is needed,
 * you can simply direct-link the image like $this->Html->image('/images/05/04/61/my_horse.thumbnail+width-100-height+100.jpg');
 *
 * @param array $operations Imagine image operations
 * @param array $separators Optional
 * @param bool $hash
 * @return string Filename compatible String representation of the operations
 * @link http://support.microsoft.com/kb/177506
 */
	public function operationsToString($operations, $separators = [], $hash = false) {
		return ImagineUtility::operationsToString($operations, $separators, $hash);
	}

/**
 * hashImageOperations
 *
 * @param array $imageSizes
 * @param int $hashLength
 * @return string
 */
	public function hashImageOperations($imageSizes, $hashLength = 8) {
		return ImagineUtility::hashImageOperations($imageSizes, $hashLength = 8);
	}

/**
 * Wrapper for Imagines crop
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function crop($Image, $options = []) {
		if (empty($options['height']) || empty($options['width'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You have to pass height and width in the options!'));
		}

		$defaults = [
			'cropX' => 0,
			'cropY' => 0
		];

		$options = array_merge($defaults, $options);

		$Image->crop(new \Imagine\Image\Point($options['cropX'], $options['cropY']), new \Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Crops an image based on its widht or height, crops it to a square and resizes it to the given size
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function squareCenterCrop($Image, $options = []) {
		if (empty($options['size'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You have to pass size in the options!'));
		}

		$imageSize = $this->getImageSize($Image);

		$width = $imageSize[0];
		$height = $imageSize[1];

		if ($width > $height) {
			$x2 = $height;
			$y2 = $height;
			$x = ($width - $height) / 2;
			$y = 0;
		} else {
			$x2 = $width;
			$y2 = $width;
			$x = 0;
			$y = ($height - $width) / 2;
		}

		$Image->crop(new \Imagine\Image\Point($x, $y), new \Imagine\Image\Box($x2, $y2));
		$Image->resize(new \Imagine\Image\Box($options['size'], $options['size']));
	}

/**
 * Widen
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function widen($Image, $options = []) {
		if (empty($options['size'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You must pass a size value!'));
		}
		$this->widenAndHeighten($Image, ['width' => $options['size']]);
	}

/**
 * Heighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function heighten($Image, $options = []) {
		if (empty($options['size'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You must pass a size value!'));
		}
		$this->widenAndHeighten($Image, ['height' => $options['size']]);
	}

/**
 * WidenAndHeighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function widenAndHeighten($Image, $options = []) {
		if (empty($options['height']) && empty($options['width']) && empty($options['size'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You have to pass a height, width or size!'));
		}

		if (!empty($options['height']) && !empty($options['width'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You can only scale by width or height!'));
		}

		if (isset($options['width'])) {
			$size = $options['width'];
			$method = 'widen';
		} elseif (isset($options['height'])) {
			$size = $options['height'];
			$method = 'heighten';
		} else {
			$size = $options['size'];
			$method = 'scale';
		}

		$imageSize = $this->getImageSize($Image);
		$width = $imageSize[0];
		$height = $imageSize[1];

		if (isset($options['noUpScale'])) {
			if ($method === 'widen') {
				if ($size > $width) {
					throw new \InvalidArgumentException(__d('imagine', 'You can not scale up!'));
				}
			} elseif ('heighten') {
				if ($size > $height) {
					throw new \InvalidArgumentException(__d('imagine', 'You can not scale up!'));
				}
			}
		}

		if (isset($options['noDownScale'])) {
			if ($method === 'widen') {
				if ($size < $width) {
					throw new \InvalidArgumentException(__d('imagine', 'You can not scale down!'));
				}
			} elseif ('heighten') {
				if ($size < $height) {
					throw new \InvalidArgumentException(__d('imagine', 'You can not scale down!'));
				}
			}
		}

		$Box = new \Imagine\Image\Box($width, $height);
		$Box = $Box->{$method}($size);
		$Image->resize($Box);
	}

/**
 * Heighten
 *
 * @param $Image
 * @param array $options
 * @throws \InvalidArgumentException
 * @return void
 */
	public function scale($Image, $options = []) {
		if (empty($options['factor'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You must pass a factor value!'));
		}

		$imageSize = $this->getImageSize($Image);
		$width = $imageSize[0];
		$height = $imageSize[1];

		$Box = new \Imagine\Image\Box($width, $height);
		$Box = $Box->scale($options['factor']);
		$Image->resize($Box);
	}

/**
 * Wrapper for Imagine flipHorizontally and flipVertically
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @return void
 */
	public function flip($Image, $options = []) {
		if (!isset($options['direction'])) {
			$options['direction'] = 'vertically';
		}
		if (!in_array($options['direction'], ['vertically', 'horizontally'])) {
			throw new \InvalidArgumentException(__d('imagine', 'Invalid direction, use vertically or horizontally'));
		}
		$method = 'flip' . $options['direction'];
		$Image->{$method}();
	}

/**
 * Wrapper for rotate
 *
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function rotate($Image, $options = []) {
		$Image->rotate($options['degree']);
	}

/**
 * Wrapper for Imagines thumbnail
 *
 * @throws \InvalidArgumentException
 * @param Imagine Image Object
 * @param array Array of options for processing the image
 * @throws InvalidArgumentException if no height or width was passed
 * @return void
 */
	public function thumbnail(&$Image, $options = []) {
		if (empty($options['height']) || empty($options['width'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You have to pass height and width in the options!'));
		}

		$mode = \Imagine\Image\ImageInterface::THUMBNAIL_INSET;
		if (isset($options['mode']) && $options['mode'] === 'outbound') {
			$mode = \Imagine\Image\ImageInterface::THUMBNAIL_OUTBOUND;
		}

		$Image = $Image->thumbnail(new \Imagine\Image\Box($options['width'], $options['height']), $mode);
	}

/**
 * Wrapper for Imagines resize
 *
 * @param $Image
 * @param array Array of options for processing the image
 * @throws \InvalidArgumentException
 * @internal param \Imagine\Imagine $Imagine Image Object
 */
	public function resize($Image, $options = []) {
		if (empty($options['height']) || empty($options['width'])) {
			throw new \InvalidArgumentException(__d('imagine', 'You have to pass height and width in the options!'));
		}

		$Image->resize(new \Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Gets the size of an image
 *
 * @param mixed Imagine Image object or string of a file name
 * @return array first value is width, second height
 * @see Imagine\Image\ImageInterface::getSize()
 */
	public function getImageSize($Image) {
		if (is_string($Image)) {
			$class = 'Imagine\\' . $this->config('engine') . '\Imagine';
			$Imagine = new $class();
			$Image = $Imagine->open($Image);
		}

		$BoxInterface = $Image->getSize($Image);

		return [
			$BoxInterface->getWidth(),
			$BoxInterface->getHeight(),
			'x' => $BoxInterface->getWidth(),
			'y' => $BoxInterface->getHeight()
		];
	}

}
